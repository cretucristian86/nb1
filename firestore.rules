/**
 * @fileoverview Firestore Security Rules for Prototyping.
 *
 * Core Philosophy:
 * This ruleset prioritizes strict user-ownership for data access while relaxing data validation
 * to facilitate rapid prototyping. It enforces that only the authenticated user can read or
 * write their own data.
 *
 * Data Structure:
 * - /users/{userId}: Stores core user profile information. Accessible only to the owning user.
 * - /nb1-users/{userId}: Stores enrollment information. Accessible only to the owning user.
 *
 * Key Security Decisions:
 * - User listing is explicitly disallowed to prevent information leakage.
 * - Data validation is minimal to accelerate development but includes basic referential integrity checks.
 * - The rules explicitly deny all write operations that are not explicitly allowed.
 *
 * Denormalization for Authorization:
 * The `userId` field is present in both `/users/{userId}` and `/nb1-users/{userId}` collections and must match the document ID.
 * This redundancy simplifies security rules and avoids costly `get()` calls.
 */
rules_version = '2';
service cloud.firestore {
  match /databases/{database}/documents {

    /**
     * @description Protects user profiles. Only the authenticated user can access their own profile.
     * @path /users/{userId}
     * @allow (get, update, delete) if the user is the owner of the profile (request.auth.uid == userId).
     * @allow (create) if the user's UID matches the userId.
     * @deny (get, list) if not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // No listing of users.

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }

    /**
     * @description Protects enrollment data. Only the authenticated user can access their own enrollment data.
     * @path /nb1-users/{userId}
     * @allow (get, update, delete) if the user is the owner of the enrollment data (request.auth.uid == userId).
     * @allow (create) if the user's UID matches the userId.
     * @deny (get, list) if not the owner.
     * @principle Enforces document ownership for all operations.
     */
    match /nb1-users/{userId} {
      // Helper function to check if the user is signed in
      function isSignedIn() {
        return request.auth != null;
      }

      // Helper function to check if the user is the owner of the document
      function isOwner(userId) {
        return request.auth.uid == userId;
      }

      // Helper function to check if the user is the existing owner of the document
      function isExistingOwner(userId) {
        return isOwner(userId) && resource.data != null;
      }
      allow get: if isOwner(userId);
      allow list: if false; // No listing of users.

      allow create: if isSignedIn() && request.auth.uid == userId;
      allow update: if isExistingOwner(userId);
      allow delete: if isExistingOwner(userId);
    }
  }
}